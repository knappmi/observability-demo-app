name: Build and Push Docker Images

on:
  push:
    branches:
      - main
      - develop
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch:

env:
  REGISTRY_DOCKERHUB: docker.io
  REGISTRY_GHCR: ghcr.io
  IMAGE_NAME: observability-demo-app
  DOCKERHUB_USERNAME: knappmi14
  GITHUB_USERNAME: knappmi

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
      actions: read
      security-events: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY_DOCKERHUB }}
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Log in to GitHub Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY_GHCR }}
        username: ${{ env.GITHUB_USERNAME }}
        password: ${{ secrets.GHCR_TOKEN }}

    - name: Generate version and tags
      id: version
      run: |
        # Get the current commit SHA (short)
        COMMIT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
        
        # Get current timestamp
        TIMESTAMP=$(date +%Y%m%d-%H%M%S)
        
        # Determine version based on event type and branch
        if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/main" ]]; then
          # Main branch - use semantic versioning with commit
          VERSION="1.0.0-${COMMIT_SHA}"
          VERSION_LABEL="v1.0.0-main-${COMMIT_SHA}"
          TAGS="latest,${VERSION}"
        elif [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/develop" ]]; then
          # Develop branch
          VERSION="1.0.0-dev-${COMMIT_SHA}"
          VERSION_LABEL="v1.0.0-dev-${COMMIT_SHA}"
          TAGS="develop,${VERSION}"
        elif [[ "${{ github.ref_type }}" == "tag" ]]; then
          # Tag push - use the tag name
          TAG_NAME=$(echo ${{ github.ref_name }} | sed 's/^v//')
          VERSION="${TAG_NAME}"
          VERSION_LABEL="v${TAG_NAME}"
          TAGS="${TAG_NAME},latest"
        elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
          # Pull request - use PR number
          VERSION="1.0.0-pr${{ github.event.number }}-${COMMIT_SHA}"
          VERSION_LABEL="v1.0.0-pr${{ github.event.number }}-${COMMIT_SHA}"
          TAGS="pr-${{ github.event.number }}"
        else
          # Feature branch or other
          BRANCH_NAME=$(echo ${{ github.ref_name }} | sed 's/[^a-zA-Z0-9._-]/-/g')
          VERSION="1.0.0-${BRANCH_NAME}-${COMMIT_SHA}"
          VERSION_LABEL="v1.0.0-${BRANCH_NAME}-${COMMIT_SHA}"
          TAGS="${BRANCH_NAME}-${COMMIT_SHA}"
        fi
        
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "version_label=${VERSION_LABEL}" >> $GITHUB_OUTPUT
        echo "tags=${TAGS}" >> $GITHUB_OUTPUT
        echo "commit_sha=${COMMIT_SHA}" >> $GITHUB_OUTPUT
        echo "timestamp=${TIMESTAMP}" >> $GITHUB_OUTPUT
        
        echo "Generated version: ${VERSION}"
        echo "Generated version label: ${VERSION_LABEL}"
        echo "Generated tags: ${TAGS}"

    - name: Generate Docker metadata for DockerHub
      id: meta-dockerhub
      uses: docker/metadata-action@v5
      with:
        images: |
          ${{ env.REGISTRY_DOCKERHUB }}/${{ env.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}
        tags: |
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=${{ steps.version.outputs.version }}
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-

    - name: Generate Docker metadata for GHCR
      id: meta-ghcr
      uses: docker/metadata-action@v5
      with:
        images: |
          ${{ env.REGISTRY_GHCR }}/${{ env.GITHUB_USERNAME }}/${{ env.IMAGE_NAME }}
        tags: |
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=${{ steps.version.outputs.version }}
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
        labels: |
          org.opencontainers.image.title=Observability Demo Web App
          org.opencontainers.image.description=Flask web application for observability demonstrations
          org.opencontainers.image.version=${{ steps.version.outputs.version }}
          org.opencontainers.image.revision=${{ github.sha }}
          app.version=${{ steps.version.outputs.version }}
          app.version.label=${{ steps.version.outputs.version_label }}
          app.commit.sha=${{ steps.version.outputs.commit_sha }}
          app.build.timestamp=${{ steps.version.outputs.timestamp }}

    - name: Build and push to DockerHub
      uses: docker/build-push-action@v5
      with:
        context: ./web-app
        file: ./web-app/Dockerfile
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta-dockerhub.outputs.tags }}
        labels: ${{ steps.meta-dockerhub.outputs.labels }}
        build-args: |
          VERSION=${{ steps.version.outputs.version }}
          VERSION_LABEL=${{ steps.version.outputs.version_label }}
          COMMIT_SHA=${{ steps.version.outputs.commit_sha }}
          BUILD_TIMESTAMP=${{ steps.version.outputs.timestamp }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push to GHCR
      uses: docker/build-push-action@v5
      with:
        context: ./web-app
        file: ./web-app/Dockerfile
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta-ghcr.outputs.tags }}
        labels: ${{ steps.meta-ghcr.outputs.labels }}
        build-args: |
          VERSION=${{ steps.version.outputs.version }}
          VERSION_LABEL=${{ steps.version.outputs.version_label }}
          COMMIT_SHA=${{ steps.version.outputs.commit_sha }}
          BUILD_TIMESTAMP=${{ steps.version.outputs.timestamp }}
        cache-from: type=gha

    - name: Run container security scan
      if: github.event_name != 'pull_request'
      continue-on-error: true
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY_DOCKERHUB }}/${{ env.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      if: github.event_name != 'pull_request'
      continue-on-error: true
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Generate deployment summary
      if: github.event_name != 'pull_request'
      run: |
        echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Property | Value |" >> $GITHUB_STEP_SUMMARY
        echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
        echo "| Version | \`${{ steps.version.outputs.version }}\` |" >> $GITHUB_STEP_SUMMARY
        echo "| Version Label | \`${{ steps.version.outputs.version_label }}\` |" >> $GITHUB_STEP_SUMMARY
        echo "| Commit SHA | \`${{ steps.version.outputs.commit_sha }}\` |" >> $GITHUB_STEP_SUMMARY
        echo "| Build Timestamp | \`${{ steps.version.outputs.timestamp }}\` |" >> $GITHUB_STEP_SUMMARY
        echo "| Event Type | \`${{ github.event_name }}\` |" >> $GITHUB_STEP_SUMMARY
        echo "| Branch/Tag | \`${{ github.ref_name }}\` |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Published Images:" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Docker Hub**: \`${{ env.REGISTRY_DOCKERHUB }}/${{ env.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **GHCR**: \`${{ env.REGISTRY_GHCR }}/${{ env.GITHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### All Tags:" >> $GITHUB_STEP_SUMMARY
        echo "**DockerHub Tags:**" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        echo "${{ steps.meta-dockerhub.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        echo "**GHCR Tags:**" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        echo "${{ steps.meta-ghcr.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
